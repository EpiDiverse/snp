// custom.config
// usage: nextflow run epidiverse/dmr [OPTIONS] -c /path/to/custom.config
//
// use this file to configure jobs on your own grid machine
// conda/docker/singularity is required for pipeline dependencies
//
// refer here to determine executor support
// https://www.nextflow.io/docs/latest/executor.html
//
// example with PBSPRO:
//

conda.cacheDir = "/path/to/shared/environments"
singularity.cacheDir = "/path/to/shared/containers"
singularity.enabled = false
docker.enabled = false



executor {

	$pbspro {
		jobName = { "${task.name}".replaceAll("\\s","") }
		submitRateLimit = '20 min'
		queueSize = 20
		pollInterval = '30 sec'
	}
}



process {

	executor = 'pbspro'

	// with conda
	module = ['Miniconda3']
	conda = "${baseDir}/env/environment.yml"

	// with docker/singularity
	container = "epidiverse/dmr"




	// top-level configuration groups
	withLabel: "low" {
    	time = { 2.h * task.attempt }
    	memory = { 2.GB * task.attempt }
    	cpus = { 2 * task.attempt }
	}

	withLabel: "high" {
    	time = { 16.h * task.attempt }
    	memory = { 24.GB * task.attempt }
    	cpus = { 8 * task.attempt }
	}

	withLabel: "finish" {
    	errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 3 ? 'finish' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 1 ? 'finish' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 1 }
	}

	withLabel: "ignore" {
    	errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 3 ? 'finish' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 1 ? 'ignore' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 1 }
	}



	// configuration for initial samtools sort, calmd, index
	withName: "preprocessing" {
	
		// label 'low' || 'high'
		// label 'finish'
    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
		//maxRetries = 1
	}
	

	// configuration for masking (genomic or bisulfite)
	withName: "masking" {
	
		// label 'low' || 'high'
		// label 'finish'
    	memory = { 8.GB * task.attempt }
    	cpus = { 8 * task.attempt }
    	maxRetries = 2
	}


	// configuration for extracting fastq reads back from masked alignments
	withName: "extracting" {

		// label 'low' || 'high'
		// label 'finish'
    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
		//maxRetries = 1
	}


	// configuration for khmer
	withName: "khmer" {

		// label 'low' || 'high'
		// label 'finish'
	    memory = { 8.GB * task.attempt }
    	cpus = { 8 * task.attempt }
		maxRetries = 1
	}


	// configuration for kwip
	withName: "kwip" {
	
		// label 'low' || 'high'
		// label 'finish'
    	memory = { 8.GB * task.attempt }
    	cpus = { 8 * task.attempt }
    	maxRetries = 2
	}


	// configuration for clustering kwip results
	withName: "clustering" {
	
		// label 'low'
		// label 'finish'
    	memory = { 500.MB * task.attempt }
    	cpus = 2
    	maxRetries = 2
	}


	// configuration for samtools sort, index
	withName: "sorting" {
	
		// label 'low' || 'high'
		// label 'finish'
    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
		//maxRetries = 1
	}


	// configuration for freebayes-parallel
	withName: "freebayes" {

		// label 'low' || 'high'
		// label 'finish'
    	memory = { 16.GB * task.attempt }
    	cpus = { 8 * task.attempt }
    	maxRetries = 2
	}


	// configuration for bcftools filtering
	withName: "bcftools" {
	
		// label 'low' || 'high'
		// label 'finish'
    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
		//maxRetries = 1
	}


	// configuration for plot-vcfstats
	withName: "plot_vcfstats" {
	
		// label 'low'
		// label 'ignore'
    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
		//maxRetries = 1
	}

}
