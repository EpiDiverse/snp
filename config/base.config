// base.config
// use this config file to modify process resource allocation

// PROCESS RESOURCES
process {

	// top-level configuration groups
	withLabel: "low" {
    	time = { 1.h * Math.pow(2, task.attempt) }
    	memory = { 1.GB * Math.pow(2, task.attempt) }
    	cpus = { 2 * task.attempt }
	}

	withLabel: "mid" {
    	time = { 8.h * Math.pow(2, task.attempt) }
    	memory = { 8.GB * Math.pow(2, task.attempt) }
    	cpus = 2

	withLabel: "high" {
    	time = { 8.h * Math.pow(2, task.attempt) }
    	memory = { 8.GB * Math.pow(2, task.attempt) }
    	cpus = { 8 * task.attempt }
	}

	withLabel: "finish" {
		maxRetries = 3
        errorStrategy = { ->
			if( (task.exitStatus in [140,141,143,137,104,134,139] && task.attempt > 3) || (!(task.exitStatus in [140,141,143,137,104,134,139]) && task.attempt > 1 ) ){
				return 'finish'
			} else if(task.exitStatus in [140,141,143,137,104,134,139]){
				return 'retry'
			} else {
				sleep(Math.pow(2, task.attempt) * 1000 as long);
				return 'retry'
			}
		}
	}

	withLabel: "ignore" {
		maxRetries = 3
        errorStrategy = { ->
			if( (task.exitStatus in [140,141,143,137,104,134,139] && task.attempt > 3) || (!(task.exitStatus in [140,141,143,137,104,134,139]) && task.attempt > 1 ) ){
				return 'ignore'
			} else if(task.exitStatus in [140,141,143,137,104,134,139]){
				return 'retry'
			} else {
				sleep(Math.pow(2, task.attempt) * 1000 as long);
				return 'retry'
			}
		}
	}
	

	// configuration for masking (genomic or bisulfite)
	withName: "masking" {
	
		// label 'low' || 'high'
		// label 'finish'
    	memory = { 4.GB * Math.pow(2, task.attempt) }
    	cpus = { 8 * task.attempt }
	}


	// configuration for khmer
	withName: "khmer" {

		// label 'low' || 'high'
		// label 'finish'
    	memory = { 4.GB * Math.pow(2, task.attempt) }
    	cpus = { 8 * task.attempt }
	}


	// configuration for kwip
	withName: "kwip" {
	
		// label 'low' || 'high'
		// label 'finish'
    	memory = { 4.GB * Math.pow(2, task.attempt) }
    	cpus = { 8 * task.attempt }
	}


	// configuration for clustering kwip results
	withName: "clustering" {
	
		// label 'low'
		// label 'finish'
    	memory = { 500.MB * task.attempt }
    	cpus = 2
	}


	// configuration for freebayes-parallel
	withName: "freebayes" {

		// label 'low' || 'high'
		// label 'finish'
		memory = { 8.GB * Math.pow(2, task.attempt) }
    	cpus = { 8 * task.attempt }
	}

}